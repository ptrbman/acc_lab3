heat_template_version: 2015-04-30

description: ACC Lab 3 configuration

# Declare parameters 
parameters:

  master_image:
    type: string
    label: Image name or ID
    description: Image to be used for compute master
    default: 4957f15b-e1c9-453e-8940-ca0b10a629c3

  master_flavor:
    type: string
    label: Flavor
    description: Type of master (flavor) to be used
    default: ACCHT18.normal

  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: Public External IPv4 Network

  hello_string:
    type: string
    description: Greeting
    default: Hello! How are you today?
    
  key:
    type: string
    description: Name of key-pair to be used for compute master
    default: ptr

  volume:
    type: string
    description: ID of data volume
    default: 3419af02-4d0f-4a76-9cab-337ff1d196fe

  slave_count:
    type: number
    label: Slave Count
    description: Number of slaves
    default: 4

  slave_image:
    type: string
    label: Image name or ID
    description: Image to be used for compute master
    default: 4957f15b-e1c9-453e-8940-ca0b10a629c3

  slave_flavor:
    type: string
    label: Flavor
    description: Type of master (flavor) to be used
    default: ACCHT18.normal
    
# Resource allocation
resources:
  name_nonce:
    type: OS::Heat::RandomString
    properties:
      length: 8
      sequence: lowercase

  generated_key_pair:
    type: OS::Nova::KeyPair
    properties:
      name: generated key pair
      save_private_key: True
      
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: security_group
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp # HTTP
          port_range_min: 80
          port_range_max: 80
        - protocol: tcp # FLASK
          port_range_min: 5000
          port_range_max: 5000
        - protocol: tcp # FLOWER
          port_range_min: 5555
          port_range_max: 5555
        - protocol: tcp # RABBITMQ
          port_range_min: 5672
          port_range_max: 5672

  allow_self_rule:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: security_group }
      remote_group: { get_resource: security_group }          

  private_network:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_network }
      cidr: 10.10.10.0/24
      dns_nameservers:
        - 130.238.164.6 
        - 130.238.4.133 
        - 130.238.7.10
        - 130.239.1.90
        - 129.16.1.53
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnet }

  master_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: private_network }
      security_groups:
        - { get_resource: security_group }

  master:
    type: OS::Nova::Server
    properties:
      image: { get_param: master_image }
      flavor: { get_param: master_flavor }
      key_name : { get_param: key }
      networks:
        - port: { get_resource: master_port }
      user_data:
        str_replace: 
          template: |
            #!/bin/bash
            
            ## KEYS
            echo "$private_key" > /home/ubuntu/.ssh/id_rsa
            echo "$public_key" >> /home/ubuntu/.ssh/authorized_keys
            
            cd /home/ubuntu
            echo "cd /home/ubuntu" >> work
            apt update
            echo "apt update" >> work
            apt install -y python3-pip
            echo "apt install -y python3-pip" >> work
            apt install -y rabbitmq-server
            echo "apt install -y rabbitmq-server" >> work
            apt install -y python3-venv
            echo "apt install -y python3-venv" >> work


            echo "export CELERY_BROKER=\"amqp://myuser:mypassword@localhost\"" > environment.sh
            echo "export CELERY_BACKEND=\"redis://localhost\"" >> environment.sh

            source environment.sh

            
            ## RabbitMQ
            rabbitmqctl add_user myuser mypassword
            echo "rabbitmqctl add_user myuser mypassword" >> work
            rabbitmqctl set_permissions myuser ".*" ".*" ".*"

            ## Volume
            mkdir /mnt/data
            echo "mkdir /mnt/data" >> work
            mount /dev/vdb /mnt/data
            echo "mount /dev/vdb /mnt/data" >> work
            ln -s /mnt/data/data /home/ubuntu/data
            echo "ln -s /mnt/data /home/ubuntu/data" >> work

            ## NFS
            apt install -y nfs-kernel-server
            
            wget http://download.redis.io/redis-stable.tar.gz
            tar xvzf redis-stable.tar.gz
            cd redis-stable
            make
            make install
            cd ..
            redis-server &

            ## Python Virtual Environment
            python3 -m venv pyenv
            echo "python3 -m venv pyenv" >> work
            source pyenv/bin/activate
            echo "source pyenv/bin/activate" >> work            
            
            ## Task (CELERY)
            wget https://raw.githubusercontent.com/ptrbman/acc_lab3/master/task.py
            echo "wget https://raw.githubusercontent.com/ptrbman/acc_lab3/master/task.py" >> work
            pip install celery
            echo "pip install celery" >> work
            pip install redis
            echo "pip install redis" >> work            
            celery -A task --detach worker --loglevel=info
            echo "celery -A task --detach worker --loglevel=info" >> work

            ## Web API
            pip install flask
            echo "pip install flask" >> work
            wget https://raw.githubusercontent.com/ptrbman/acc_lab3/master/web.py
            echo "wget https://raw.githubusercontent.com/ptrbman/acc_lab3/master/web.py" >> work
            python web.py &
            echo "python web.py &" >> work

            ## FLOWER
            echo "asd" >> asd
            pip install flower
            echo "dsa" >> dsa            
            echo "pip install flower" >> work
            celery flower &
            echo "celery flower &" >> work

            

            ## HELLO
            echo "$hello_string" > hello

          params:
            $private_key: { get_attr: [generated_key_pair, private_key] }
            $public_key: { get_attr: [generated_key_pair, public_key] }                        
            $hello_string: { get_param: hello_string }

  vol_att:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: master }
      volume_id: { get_param: volume }
      mountpoint: /dev/vdb

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: master_port }

  slaveresources:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: slave_count }
      resource_def:
        type: OS::Nova::Server
        properties:
          key_name: { get_param: key }
          image: { get_param: slave_image }
          flavor: { get_param: slave_flavor }
          name:
            str_replace:
              template: slave-$NONCE-%index%
              params:
                $NONCE: { get_resource: name_nonce }
          networks: [{network: { get_resource: private_network }}]
          user_data:
            str_replace:
              
              template: |
                #!/bin/bash
                cd /home/ubuntu
                ## KEYS
                echo "$private_key" > /home/ubuntu/.ssh/id_rsa
                echo "$public_key" >> /home/ubuntu/.ssh/authorized_keys

                echo "export CELERY_BROKER=\"amqp://myuser:mypassword@$MASTER_IP\"" > environment.sh
                echo "export CELERY_BACKEND=\"redis://$MASTER_IP\"" >> environment.sh

                source environment.sh
                
                apt update
                apt install -y python3-pip
                apt install -y python3-venv
                python3 -m venv pycelery
                source pycelery/bin/activate
                pip install celery[redis]
                wget https://raw.githubusercontent.com/ptrbman/acc_lab3/master/task.py
                celery -A task worker
                
              params:
                $NONCE: { get_resource: name_nonce }
                $MASTER_IP : { get_attr: [master, first_address] }
                $private_key: { get_attr: [generated_key_pair, private_key] }
                $public_key: { get_attr: [generated_key_pair, public_key] }                                        
                            


# Output in case of successful booting
outputs:
  master_name:
    description: Name of the master
    value: { get_attr: [master, name] }

  master_ip:
    description: IP address of the master master
    value: { get_attr: [master, first_address] }

  master_floating_ip:
    description: Floating IP address of the master master
    value: { get_attr: [floating_ip, floating_ip_address] } 


  worker_ips:
    description: Internal Addresses of the workers
    value: { get_attr: [slaveresources, first_address] }

  worker_names:
    description: Internal Addresses of the workers
    value: { get_attr: [slaveresources, name] }    
